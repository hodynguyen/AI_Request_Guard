local cjson = require "cjson"
local http = require "resty.http"

-- ƒê·ªçc th√¥ng tin request
ngx.req.read_body()
local method = ngx.req.get_method()
local uri = ngx.var.request_uri
local args = ngx.req.get_uri_args()

local req_data = {
  method = method,
  path = uri,
  args = args
}

-- G·ª≠i d·ªØ li·ªáu t·ªõi AI API (mock hi·ªán t·∫°i)
local httpc = http.new()
local res, err = httpc:request_uri("http://ai-api:8000/predict", {
  method = "POST",
  body = cjson.encode(req_data),
  headers = {["Content-Type"] = "application/json"},
  keepalive_timeout = 60
})

if not res then
  ngx.status = 500
  ngx.say("Failed to request AI API: ", err)
  return ngx.exit(500)
end

-- Decode JSON an to√†n
local ok, result = pcall(cjson.decode, res.body)
if not ok then
  ngx.status = 500
  ngx.say("Failed to decode AI response: ", res.body)
  return ngx.exit(500)
end

-- üö´ Ch·∫∑n n·∫øu URL ch·ª©a "admin"
if string.find(req_data.path, "admin") then
  ngx.status = 403
  ngx.say("‚ùå Blocked manually (contains 'admin')")
  return ngx.exit(403)
end

-- üö´ Ch·∫∑n n·∫øu AI tr·∫£ v·ªÅ block
if result.decision == "block" then
  ngx.status = 403
  ngx.say("‚ùå Blocked by AI decision")
  return ngx.exit(403)
end

-- ‚úÖ Cho ph√©p c√°c request c√≤n l·∫°i
ngx.say("‚úÖ Request allowed.")
